.container.my-4
  .row
    .col-8
      %h5= @plan.persisted? ? @plan.name : I18n.t('actions.add', model_name: Plan.model_name.human.titleize)
    .col-4
      %h1.text-white
        %span{ class: state_badge_class(@plan) }= display_state(@plan)

      - if @plan.persisted?
        = link_to download_plan_path(@plan, format: :pdf), class: 'btn btn-primary float-right mr-2' do
          = t('actions.download')
          = icon('download')

  .row
    .col-12
      = bootstrap_form_for @plan do |f|
        - if policy(@plan).change_user?
          = f.select :user_id, options_for_select(User.order(:first_name).all.map { |t| [t.name, t.id] },
                               selected: f.object.user_id || current_user.id),
                               { wrapper: { class: 'plan-user-id-form-group' }, hide_label: true, class: 'input-group-btn', required: true }
        - else
          = f.hidden_field :user_id, value: f.object.user_id || current_user.id

        .row
          = f.text_field :start_date, wrapper: { class: 'col-md-3 plan-start-date-container' }, help: t('plans.hints.start_date'),
                          autocomplete: 'off', 'data-behaviour-flatpickr': true, disabled: !policy(@plan).update?
          = f.text_field :end_date, wrapper: { class: 'col-md-3 plan-end-date-container' }, help: t('plans.hints.end_date'),
                          autocomplete: 'off', 'data-behaviour-flatpickr': true, disabled: !policy(@plan).update?
        .row
          = f.number_field :working_hours_per_week, wrapper: { class: 'col-md-3' }, step: 0.5

        .border.my-4.p-4
          %label= Plan.human_attribute_name('activities')
          .table-responsive
            %table#plan-activities-table.table.table-sm
              %thead.bg-white
                %tr
                  - TagType.active_for(Activity).sorted.each do |t|
                    %th.font-weight-normal.sort{ 'data-sort': t.name.parameterize }
                      = t.name
                  %th.font-weight-normal.sort{ 'data-sort': Activity.human_attribute_name('duration').parameterize }
                    = Activity.human_attribute_name('duration')
                  %th
              %tbody.activities.list
                = f.fields_for :activities, wrapper: false, include_id: false do |activity_form|
                  = render 'activity_fields', plan: @plan, plan_form: f, f: activity_form
              %tfoot
                %tr
                  %td{ colspan: 3 }
                  %td#plan-total-time-worked-per-week.small{ colspan: 2 }
                    - if @plan.activities.any?
                      = t('plans.total_time_worked_per_week', total: duration_in_words(plan_total_time_worked_per_week(@plan), :short))

          - if policy(@plan).update?
            %div
              = link_to_add_association I18n.t('actions.add', model_name: Activity.model_name.human.titleize), f,
                                        :activities,
                                        data: { 'association-insertion-node': 'tbody.activities', 'association-insertion-method': 'append' },
                                        class: 'btn btn-primary',
                                        render_options: { locals: { plan: @plan } }

        = render 'totals_card', activity_tags_top_level: @activity_tags_top_level, activities: @activities if @plan.persisted?

        .border.my-4.p-4
          %label= Plan.human_attribute_name('signoffs')
          %table#plan-signoffs.table
            %tbody.signoffs.list
              = f.fields_for :signoffs, @plan.required_signoffs, wrapper: false, include_id: false do |signoff_form|
                = render 'signoff_fields', f: signoff_form

          - if policy(@plan).update?
            %div
              = link_to_add_association I18n.t('actions.add', model_name: Signoff.model_name.human.titleize), f, :signoffs,
                                        data: { 'association-insertion-node': 'tbody.signoffs', 'association-insertion-method': 'append' },
                                        class: 'btn btn-primary',
                                        render_options: { locals: { plan: @plan } }
        - if policy(@plan).update?
          = f.submit I18n.t('actions.save'), class: 'btn btn-primary mt-4'
        = link_to I18n.t('actions.cancel'), plans_path, class: 'btn btn-outline-secondary mt-4'
